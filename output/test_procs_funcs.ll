; LLVM IR generated by LLVMGenerator
target datalayout = "e-m:e-p:32:32:i64:64-n32:64-S128"
target triple   = "wasm32-unknown-unknown"

declare i8*  @malloc(i32)
declare void @printInt(i32)
declare void @printString(i8*)
declare i32  @readInt()

@g_total = global i32 0
@.str.0 = private unnamed_addr constant [25 x i8] c"Total due with 8% tax: $\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"Added item: $\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"; total = $\00", align 1


define void @AddItem(i32 %price) {
entry:
  %r6 = alloca i32
  store i32 %price, i32* %r6
  %r7 = load i32, i32* @g_total
  %r8 = load i32, i32* %r6
  %r9 = add i32 %r7, %r8
  store i32 %r9, i32* @g_total
  %r10 = bitcast [14 x i8]* @.str.1 to i8*
  call void @printString(i8* %r10)
  %r11 = load i32, i32* %r6
  call void @printInt(i32 %r11)
  %r12 = bitcast [12 x i8]* @.str.2 to i8*
  call void @printString(i8* %r12)
  %r13 = load i32, i32* @g_total
  call void @printInt(i32 %r13)
  ret void
}

define i32 @CalculateFinalAmount(i32 %rate) {
entry:
  %r14 = alloca i32
  %r15 = alloca i32
  store i32 %rate, i32* %r15
  %r16 = load i32, i32* @g_total
  %r17 = load i32, i32* @g_total
  %r18 = load i32, i32* %r15
  %r19 = mul i32 %r17, %r18
  %r20 = add i32 0, 100
  %r21 = sdiv i32 %r19, %r20
  %r22 = add i32 %r16, %r21
  store i32 %r22, i32* %r14
  %r23 = load i32, i32* %r14
  ret i32 %r23
}


define i32 @main() {
entry:
  %r0 = add i32 0, 0
  store i32 %r0, i32* @g_total
  %r1 = add i32 0, 100
  call void @AddItem(i32 %r1)
  %r2 = add i32 0, 200
  call void @AddItem(i32 %r2)
  %r3 = bitcast [25 x i8]* @.str.0 to i8*
  call void @printString(i8* %r3)
  %r4 = add i32 0, 8
  %r5 = call i32 @CalculateFinalAmount(i32 %r4)
  call void @printInt(i32 %r5)
  ret i32 0
}
