; LLVM IR generated by LLVMGenerator
target datalayout = "e-m:e-p:32:32:i64:64-n32:64-S128"
target triple   = "wasm32-unknown-unknown"

declare i8*  @malloc(i32)
declare void @printInt(i32)
declare void @printString(i8*)
declare i32  @readInt()

@g_x = global i32 0
@g_y = global i32 0
@.str.0 = private unnamed_addr constant [29 x i8] c"[Main] before ProcTest, x = \00", align 1
@.str.1 = private unnamed_addr constant [28 x i8] c"[Main] after ProcTest, x = \00", align 1
@.str.2 = private unnamed_addr constant [29 x i8] c"[Main] before FuncTest, y = \00", align 1
@.str.3 = private unnamed_addr constant [28 x i8] c"[Main] after FuncTest, y = \00", align 1
@.str.4 = private unnamed_addr constant [26 x i8] c"[ProcTest] parameter x = \00", align 1
@.str.5 = private unnamed_addr constant [29 x i8] c"[ProcTest] computed value = \00", align 1
@.str.6 = private unnamed_addr constant [35 x i8] c"[ProcTest] modified parameter x = \00", align 1
@.str.7 = private unnamed_addr constant [26 x i8] c"[FuncTest] parameter y = \00", align 1
@.str.8 = private unnamed_addr constant [30 x i8] c"[FuncTest] returning value = \00", align 1


define void @ProcTest(i32 %x) {
entry:
  %r13 = alloca i32
  store i32 %x, i32* %r13
  %r14 = bitcast [26 x i8]* @.str.4 to i8*
  call void @printString(i8* %r14)
  %r15 = load i32, i32* %r13
  call void @printInt(i32 %r15)
  %r16 = bitcast [29 x i8]* @.str.5 to i8*
  call void @printString(i8* %r16)
  %r17 = load i32, i32* %r13
  %r18 = add i32 0, 10
  %r19 = add i32 %r17, %r18
  call void @printInt(i32 %r19)
  %r20 = load i32, i32* %r13
  %r21 = add i32 0, 10
  %r22 = add i32 %r20, %r21
  store i32 %r22, i32* %r13
  %r23 = bitcast [35 x i8]* @.str.6 to i8*
  call void @printString(i8* %r23)
  %r24 = load i32, i32* %r13
  call void @printInt(i32 %r24)
  ret void
}

define i32 @FuncTest(i32 %y) {
entry:
  %r25 = alloca i32
  %r26 = alloca i32
  store i32 %y, i32* %r26
  %r27 = bitcast [26 x i8]* @.str.7 to i8*
  call void @printString(i8* %r27)
  %r28 = load i32, i32* %r26
  call void @printInt(i32 %r28)
  %r29 = load i32, i32* %r26
  %r30 = add i32 0, 2
  %r31 = mul i32 %r29, %r30
  store i32 %r31, i32* %r25
  %r32 = bitcast [30 x i8]* @.str.8 to i8*
  call void @printString(i8* %r32)
  %r33 = load i32, i32* %r25
  call void @printInt(i32 %r33)
  %r34 = load i32, i32* %r25
  ret i32 %r34
}


define i32 @main() {
entry:
  %r0 = add i32 0, 5
  store i32 %r0, i32* @g_x
  %r1 = add i32 0, 7
  store i32 %r1, i32* @g_y
  %r2 = bitcast [29 x i8]* @.str.0 to i8*
  call void @printString(i8* %r2)
  %r3 = load i32, i32* @g_x
  call void @printInt(i32 %r3)
  %r4 = add i32 0, 20
  call void @ProcTest(i32 %r4)
  %r5 = bitcast [28 x i8]* @.str.1 to i8*
  call void @printString(i8* %r5)
  %r6 = load i32, i32* @g_x
  call void @printInt(i32 %r6)
  %r7 = bitcast [29 x i8]* @.str.2 to i8*
  call void @printString(i8* %r7)
  %r8 = load i32, i32* @g_y
  call void @printInt(i32 %r8)
  %r9 = add i32 0, 15
  %r10 = call i32 @FuncTest(i32 %r9)
  store i32 %r10, i32* @g_y
  %r11 = bitcast [28 x i8]* @.str.3 to i8*
  call void @printString(i8* %r11)
  %r12 = load i32, i32* @g_y
  call void @printInt(i32 %r12)
  ret i32 0
}
