; LLVM IR generated by LLVMGenerator
target datalayout = "e-m:e-p:32:32:i64:64-n32:64-S128"
target triple   = "wasm32-unknown-unknown"

declare i8*  @malloc(i32)
declare void @printInt(i32)
declare void @printString(i8*)
declare i32  @readInt()

@g_tx = global i32 0
@g_processed = global i32 0
@.str.0 = private unnamed_addr constant [32 x i8] c"Starting transaction processing\00", align 1
@.str.7 = private unnamed_addr constant [7 x i8] c"Order \00", align 1
@.str.8 = private unnamed_addr constant [24 x i8] c" is cancelled, skipping\00", align 1
@.str.11 = private unnamed_addr constant [7 x i8] c"Order \00", align 1
@.str.12 = private unnamed_addr constant [33 x i8] c" is flagged fraudulent, stopping\00", align 1
@.str.13 = private unnamed_addr constant [18 x i8] c"Processing order \00", align 1
@.str.14 = private unnamed_addr constant [19 x i8] c"Processed orders: \00", align 1



define i32 @main() {
entry:
  %r0 = add i32 0, 0
  store i32 %r0, i32* @g_processed
  %r1 = bitcast [32 x i8]* @.str.0 to i8*
  call void @printString(i8* %r1)
  %r2 = add i32 0, 1
  store i32 %r2, i32* @g_tx
  br label %forcond1

forcond1:
  %r3 = load i32, i32* @g_tx
  %r4 = add i32 0, 10
  %r5 = icmp sle i32 %r3, %r4
  br i1 %r5, label %forbody2, label %forend4

forbody2:
  %r6 = load i32, i32* @g_tx
  %r7 = add i32 0, 3
  %r8 = icmp eq i32 %r6, %r7
  %r9 = zext i1 %r8 to i32
  %r10 = icmp ne i32 %r9, 0
  br i1 %r10, label %then5, label %endif6

then5:
  %r11 = bitcast [7 x i8]* @.str.7 to i8*
  call void @printString(i8* %r11)
  %r12 = load i32, i32* @g_tx
  call void @printInt(i32 %r12)
  %r13 = bitcast [24 x i8]* @.str.8 to i8*
  call void @printString(i8* %r13)
  br label %forinc3
  br label %endif6

endif6:
  %r14 = load i32, i32* @g_tx
  %r15 = add i32 0, 6
  %r16 = icmp eq i32 %r14, %r15
  %r17 = zext i1 %r16 to i32
  %r18 = icmp ne i32 %r17, 0
  br i1 %r18, label %then9, label %endif10

then9:
  %r19 = bitcast [7 x i8]* @.str.11 to i8*
  call void @printString(i8* %r19)
  %r20 = load i32, i32* @g_tx
  call void @printInt(i32 %r20)
  %r21 = bitcast [33 x i8]* @.str.12 to i8*
  call void @printString(i8* %r21)
  br label %forend4
  br label %endif10

endif10:
  %r22 = bitcast [18 x i8]* @.str.13 to i8*
  call void @printString(i8* %r22)
  %r23 = load i32, i32* @g_tx
  call void @printInt(i32 %r23)
  %r24 = load i32, i32* @g_processed
  %r25 = add i32 0, 1
  %r26 = add i32 %r24, %r25
  store i32 %r26, i32* @g_processed
  br label %forinc3

forinc3:
  %r27 = add i32 %r3, 1
  store i32 %r27, i32* @g_tx
  br label %forcond1

forend4:
  %r28 = bitcast [19 x i8]* @.str.14 to i8*
  call void @printString(i8* %r28)
  %r29 = load i32, i32* @g_processed
  call void @printInt(i32 %r29)
  ret i32 0
}
