; LLVM IR generated by LLVMGenerator
target datalayout = "e-m:e-p:32:32:i64:64-n32:64-S128"
target triple   = "wasm32-unknown-unknown"

declare i8*  @malloc(i32)
declare void @printInt(i32)
declare void @printString(i8*)
declare i32  @readInt()

@g_x = global i32 0
@.str.0 = private unnamed_addr constant [11 x i8] c"Initial x=\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"After SetX, x=\00", align 1
@.str.2 = private unnamed_addr constant [20 x i8] c"After TestScope, x=\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"Add(7,8)=\00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"Setting x to \00", align 1
@.str.5 = private unnamed_addr constant [23 x i8] c"Inside TestScope, val=\00", align 1
@.str.6 = private unnamed_addr constant [39 x i8] c"Inside TestScope after increment, val=\00", align 1


define void @SetX(i32 %val) {
entry:
  %r13 = alloca i32
  store i32 %val, i32* %r13
  %r14 = bitcast [14 x i8]* @.str.4 to i8*
  call void @printString(i8* %r14)
  %r15 = load i32, i32* %r13
  call void @printInt(i32 %r15)
  %r16 = load i32, i32* %r13
  store i32 %r16, i32* @g_x
  ret void
}

define void @TestScope(i32 %val) {
entry:
  %r17 = alloca i32
  store i32 %val, i32* %r17
  %r18 = bitcast [23 x i8]* @.str.5 to i8*
  call void @printString(i8* %r18)
  %r19 = load i32, i32* %r17
  call void @printInt(i32 %r19)
  %r20 = load i32, i32* %r17
  %r21 = add i32 0, 10
  %r22 = add i32 %r20, %r21
  store i32 %r22, i32* %r17
  %r23 = bitcast [39 x i8]* @.str.6 to i8*
  call void @printString(i8* %r23)
  %r24 = load i32, i32* %r17
  call void @printInt(i32 %r24)
  ret void
}

define i32 @Add(i32 %a, i32 %b) {
entry:
  %r25 = alloca i32
  %r26 = alloca i32
  store i32 %a, i32* %r26
  %r27 = alloca i32
  store i32 %b, i32* %r27
  %r28 = load i32, i32* %r26
  %r29 = load i32, i32* %r27
  %r30 = add i32 %r28, %r29
  store i32 %r30, i32* %r25
  %r31 = load i32, i32* %r25
  ret i32 %r31
}


define i32 @main() {
entry:
  %r0 = add i32 0, 5
  store i32 %r0, i32* @g_x
  %r1 = bitcast [11 x i8]* @.str.0 to i8*
  call void @printString(i8* %r1)
  %r2 = load i32, i32* @g_x
  call void @printInt(i32 %r2)
  %r3 = add i32 0, 30
  call void @SetX(i32 %r3)
  %r4 = bitcast [15 x i8]* @.str.1 to i8*
  call void @printString(i8* %r4)
  %r5 = load i32, i32* @g_x
  call void @printInt(i32 %r5)
  %r6 = add i32 0, 100
  call void @TestScope(i32 %r6)
  %r7 = bitcast [20 x i8]* @.str.2 to i8*
  call void @printString(i8* %r7)
  %r8 = load i32, i32* @g_x
  call void @printInt(i32 %r8)
  %r9 = bitcast [10 x i8]* @.str.3 to i8*
  call void @printString(i8* %r9)
  %r10 = add i32 0, 7
  %r11 = add i32 0, 8
  %r12 = call i32 @Add(i32 %r10, i32 %r11)
  call void @printInt(i32 %r12)
  ret i32 0
}
